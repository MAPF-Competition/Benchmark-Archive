from warehouse_task_generator import WarehouseTaskGenerator
import numpy as np
import argparse
import easydict
import random
import json

import logging
import os
from typing import List
import sys

import shutil
import subprocess
from problem_generator import ProblemGenerator

class WarehouseBenchmarkGenerator:
    def __init__(self, args) -> None:
        self.args=args


    def move_file_to_folder(self,file_path, target_folder):
        # Get the file name from the file path
        file_name = os.path.basename(file_path)

        # Create the target folder if it doesn't exist
        if not os.path.exists(target_folder):
            os.makedirs(target_folder)

        # Construct the new file path in the target folder
        new_file_path = os.path.join(target_folder, file_name)

        # Move the file to the target folder
        try:
            shutil.move(file_path, new_file_path)
        except shutil.SameFileError:
            pass
        # print(f"File '{file_name}' moved to '{target_folder}'.")
        return new_file_path

    def copy_file_to_folder(self, file_path, target_folder):
        # Get the file name from the file path
        file_name = os.path.basename(file_path)

        # Create the target folder if it doesn't exist
        if not os.path.exists(target_folder):
            os.makedirs(target_folder)

        # Construct the new file path in the target folder
        new_file_path = os.path.join(target_folder, file_name)

        # Copy the file to the target folder
        try:
            shutil.copy(file_path, new_file_path)
        except shutil.SameFileError:
            pass
        print(f"File '{file_name}' copied to '{target_folder}'.")
        return new_file_path


    def create_benchmark_folders(self, benchmark_folder):
        subfolders = ["tasks", "maps", "agents"]

        if not os.path.exists(benchmark_folder):
            os.mkdir(benchmark_folder)
            print(f"Folder '{benchmark_folder}' created.")

        for subfolder in subfolders:
            subfolder_path = os.path.join(benchmark_folder, subfolder)
            if not os.path.exists(subfolder_path):
                os.mkdir(subfolder_path)
                print(f"Subfolder '{subfolder}' created in '{benchmark_folder}'.")

    

        
    def generate_problem(self):
        args=self.args
        print(f"--mapFile: {args.mapFile} (Description: Map file name.)")
        print(f"--taskFile: {args.taskFile} (Description: Task file.)")
        print(f"--problemName: {args.problemName} (Description: Problem Name.)")
        print(f"--teamSizes: {args.teamSizes} (Description: Team sizes.)")
        print(f"--benchmark_folder: {args.benchmark_folder} (Description: Benchmark folder.)")
        print(f"--revealNum: {args.revealNum} (Description: Number of tasks revealed.)")
        print(f"--taskAssignmentStrategy: {args.taskAssignmentStrategy} (Description: taskAssignmentStrategy.)")

        if args.benchmark_folder:
            self.create_benchmark_folders(args.benchmark_folder)
   
        new_task = self.copy_file_to_folder(args.taskFile,args.benchmark_folder+"/tasks/")
        new_map = self.copy_file_to_folder(args.mapFile,args.benchmark_folder+"/maps/")
        
        for num_agents in args.teamSizes:
            TG=WarehouseTaskGenerator()
            agent_file=args.problemName+"_"+str(num_agents)+".agents"
            problemNameK=args.problemName+"_"+str(num_agents)+".json"
            TG.generate_agents(num_agents,args.mapFile,agent_file)
            new_agent = self.move_file_to_folder(agent_file,args.benchmark_folder+"/agents/")

            TG.generate_problem(
                os.path.relpath(new_map,args.benchmark_folder),
                os.path.relpath(new_agent, args.benchmark_folder),
                num_agents,
                os.path.relpath(new_task,args.benchmark_folder),
                args.revealNum,problemNameK)
            self.move_file_to_folder(problemNameK, args.benchmark_folder+"/")





def parse_arguments():
    parser = argparse.ArgumentParser(description='Process command-line arguments.')
    # Add arguments to the parser

    parser.add_argument('--mapFile', required=True ,type=str, help='Path to an existing map file. The map file is produced by map_generator.py or any grid map in the standard format.')
    parser.add_argument('--taskFile', help='Path to an existing task file generated by task_generator.py.')

    parser.add_argument('--taskNum', type=int,default=1,  help='Number of tasks per agent')
    parser.add_argument('--problemName',default="problem",help="The name of the output problem file (default name = 'problem')")

    parser.add_argument('--teamSizes', nargs='+', type=int, default=[100,200,300],help='The number of agents in a team. Specify multiple values to generate multiple problems , each with a  different team of agents. eg. [100,200,300, â€¦]')
    parser.add_argument('--benchmark_folder',default="./", type=str, help='Path to place the resulting problem file. ')
    parser.add_argument('--revealNum', type=int,default=1, help='Number of tasks revealed (>=1).')
    parser.add_argument('--taskAssignmentStrategy', type=str,default="roundrobin", help='Task assignment strategy (roundrobin, greedy)')

    # parser.add_argument('--isWarehouse', type=bool, default=True)
    # Parse the command-line arguments
    args = parser.parse_args()
    
    return args


class RandomBenchmarkGenerator:    
    def __init__(self, args) -> None:
        self.args=args

    def move_file_to_folder(self,file_path, target_folder):
        # Get the file name from the file path
        file_name = os.path.basename(file_path)

        # Create the target folder if it doesn't exist
        if not os.path.exists(target_folder):
            os.makedirs(target_folder)

        # Construct the new file path in the target folder
        new_file_path = os.path.join(target_folder, file_name)

        # Move the file to the target folder
        try:
            shutil.move(file_path, new_file_path)
        except shutil.SameFileError:
            pass
        # print(f"File '{file_name}' moved to '{target_folder}'.")
        return new_file_path

    def create_benchmark_folders(self, benchmark_folder):
        subfolders = ["tasks", "maps", "agents"]

        if not os.path.exists(benchmark_folder):
            os.mkdir(benchmark_folder)
            print(f"Folder '{benchmark_folder}' created.")

        for subfolder in subfolders:
            subfolder_path = os.path.join(benchmark_folder, subfolder)
            if not os.path.exists(subfolder_path):
                os.mkdir(subfolder_path)
                print(f"Subfolder '{subfolder}' created in '{benchmark_folder}'.")

    def copy_file_to_folder(self, file_path, target_folder):
        # Get the file name from the file path
        file_name = os.path.basename(file_path)

        # Create the target folder if it doesn't exist
        if not os.path.exists(target_folder):
            os.makedirs(target_folder)

        # Construct the new file path in the target folder
        new_file_path = os.path.join(target_folder, file_name)

        # Copy the file to the target folder
        try:
            shutil.copy(file_path, new_file_path)
        except shutil.SameFileError:
            pass
        print(f"File '{file_name}' copied to '{target_folder}'.")
        return new_file_path

    def generate_problem(self):
        if self.args.benchmark_folder:
            self.create_benchmark_folders(self.args.benchmark_folder)
        # new_task = self.copy_file_to_folder(self.args.taskFile,self.args.benchmark_folder+"/tasks/")
        new_task= self.args.problemName+".tasks"
        new_map = self.copy_file_to_folder(self.args.mapFile,self.args.benchmark_folder+"/maps/")
        task_generated=False
        for num_agents in self.args.teamSizes:
            
            args=easydict.EasyDict()    
            args.agentFile=self.args.problemName+"_"+str(num_agents)+".agents"
            args.problemFile=self.args.problemName+"_"+str(num_agents)+".json"
            
            args.mapFile=os.path.relpath(new_map,self.args.benchmark_folder)
            args.taskFile=os.path.relpath(new_task,self.args.benchmark_folder)
            args.taskFile = os.path.basename(args.taskFile)


            args.revealNum=self.args.revealNum
            args.teamSize=num_agents
            args.problemDir=self.args.benchmark_folder
            args.taskNum=self.args.taskNum
            args.config=None
        

            PG=ProblemGenerator(args)
            
            # TG.generate_agents(num_agents,args.mapFile,agent_file)
            # new_agent = self.move_file_to_folder(agent_file,args.benchmark_folder+"/agents/")

            PG.generate_problem(task_generated)
            task_generated=True
        # self.move_file_to_folder(self.args.benchmark_folder+"/"+new_task, self.args.benchmark_folder+"/tasks/")




if __name__=="__main__":
    args=parse_arguments()
    if args.taskFile is not None:
        WBG=WarehouseBenchmarkGenerator(args)
        WBG.generate_problem()
    else:
        RBG=RandomBenchmarkGenerator(args)
        RBG.generate_problem()
    